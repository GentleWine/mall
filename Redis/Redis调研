目录
一、Radis简介
1.1 定义相关
1.2 使用场景

二、Redis的数据结构与相关命令操作
2.0 前提
2.1 string（字符串）
2.2 hash（哈希）
2.3 list（列表）
2.4 set（集合）
2.5 zset(sorted set：有序集合)。

三、Redis的命令

四、Redis的配置属性

五、Redis的安装与使用(未填写)

六、Redis与数据库的交互设计方案

七、参考








一、Radis简介

1.1 定义相关
{
	1. Redis(REmote Dictionary Server) ，被称为远程字典服务器、数据结构服务器。实际上，就是以key-value形式进行数据存储的，支持跨平台的，非关系型数据库(NoSQL)。相比较于关系型数据库(SQL)：
	{
	对于关系型数据库，数据库中的数据是以表的结构进行存储，每张表的属性确定，表与表之间存在联系；
	对于非关系型数据库，没有表的形式，均以键值对进行存储，数据形式较自由，操控数据较容易，灵活度较高。
	}

	2. Radis是在运行时，内存层面上的，可持久保存数据的，非关系型数据库。
这意味着：
	{
	开启服务时，Redis会根据配置与磁盘的存储内容，往内存中恢复地添加数据；
	处理时，Redis会在内存中进行数据处理操作，处理速度快；
	关闭服务时，Redis会根据配置的存储方式，将数据存储在磁盘中。
	异常关闭时，为了保证可持久性，Redis中的配置可以选择两种的存储方式：RDB (Redis DataBase) 和 AOF (Append Only File) 。
		{
		RDB方式：在不同的时间点，将redis存储的数据生成快照并存储到磁盘等介质上。由于在不同时间点，所以可能会丢失距离上一次保存时间点期间的数据。由于快照，将保存完整的数据。(丢失与完整)
		AOF方式：将redis执行过的所有写指令记录下来，在下次redis重新启动时，重复执行这些指令，以实现数据恢复。由于需要额外记录指令，所以消耗的内存更大。但是由于实时添加写操作指令，所以可以保证数据的不丢失。(不丢失与大存储空间)
	}
}

1.2 使用场景
{
Redis是在内存上进行的存储的非关系型数据库。它的处理速度非常快，存储在内存中。
Redis可以不单独使用，作为已有的对硬盘操作的数据库的，缓存存储。
对于如何保证，硬盘数据库与内存数据库Redis，的信息的一致性。
可以这么理解：
	你的数据库不是只有MySQL，而是MySQL与Redis两个的组合，加入Redis，其实是扩充了数据库的范围。从原来只有在硬盘上写的数据库，变成了既有硬盘，也有内存的数据库。
	由于两者都能够保证数据的持久性，那么，只要数据存储在两者中，都算保证了信息的一致。
	但是由于内存空间有限，所以需要间断或者在某种情况下触发，将Redis的数据，移到MySQL中。以减轻Redis。

通过理解以下案例，初步得到Redis的使用需求：
	加快应用中的数据访问速度：
	当需要频繁访问某一部分特定数据时。比如查找最新排行，或者计数。（由于很快，可以持久保存计数结果并对计数进行修改）



1. 应用案例  Pinterest：Reids维护上百亿的相关性
	Pinterest已经成为硅谷最疯故事之一，在2012年，他们基于PC的业务增加1047%，移动端采用增加1698%， 该年3月其独立访问数量更飙升至533亿。在Pinterest，人们关注的事物以百亿记——每个用户界面都会查询某个board或者是用户是否关注的行为促成了异常复杂的工程问题。这也让Redis获得了用武之地。

==通过缓存来优化用户体验
{
	近日，Pinterest工程经理Abhi Khune对其公司的用户体验需求及Redis的使用经验 进行了分享。即使是滋生的应用程序打造者，在分析网站的细节之前也不会理解这些特性，因此先大致的理解一下使用场景：首先，为每个粉丝进行提及到的预检查；其次，UI将准确的显示用户的粉丝及关注列表分页。高效的执行这些操作，每次点击都需要非常高的性能架构。

	不能免俗，Pinterest的软件工程师及架构师已经使用了MySQL及memcache，但是缓存解决方案仍然达到了他们的瓶颈；因此为了拥有更好的用户体验，缓存必须被扩充。而在实际操作过程中，工程团队已然发现缓存只有当用户sub-graph已经在缓存中时才会起到作用。因此。任何使用这个系统的人都需要被缓存，这就导致了整个图的缓存。同时，最常见的查询“用户A是否关注了用户B”的答案经常是否定的，然而这却被作为了缓存丢失，从而促成一个数据库查询，因此他们需要一个新的方法来扩展缓存。最终，他们团队决定使用Redis来存储整个图，用以服务众多的列表。
}
==使用Redis存储大量的Pinterest列表
{
Pinterest使用了Redis作为解决方案，并将性能推至了内存数据库等级，为用户保存多种类型列表：

关注者列表
你所关注的board列表
粉丝列表
关注你board的用户列表
某个用户中board中你没有关注的列表
每个board的关注者及非关注者
	Redis为其7000万用户存储了以上的所有列表，本质上讲可以说是储存了所有粉丝图，通过用户ID分片。鉴于你可以通过类型来查看以上列表的数据，分析概要信息被用看起来更像事务的系统储存及访问。Pinterest当下的用户like被限制为10万，初略进行统计：如果每个用户关注25个board，将会在用户及board间产生17.5亿的关系。同时更加重要的是，这些关系随着系统的使用每天都会增加。
}

2. 具体使用
== 计数
	Redis是一个很好的计数器，
	我相信你曾许多次想要给数据库加上新的计数器，用来获取统计或显示新信息，但是最后却由于写入敏感而不得不放弃它们。
	好了，现在使用Redis就不需要再担心了。有了原子递增（atomic increment），你可以放心的加上各种计数，用GET SET重置，或者是让它们过期。
	例如这样操作：
	INCR user:<id> EXPIRE  //INCR  /  incr ，是增加命令
	user:<id> 60    //
	你可以计算出最近用户在页面间停顿不超过60秒的页面浏览量，当计数达到比如20时，就可以显示出某些条幅提示，或是其它你想显示的东西。

== 显示最新的项目列表
	下面这个语句常用来显示最新项目，随着数据多了，查询毫无疑问会越来越慢。
	SELECT * FROM foo WHERE ... ORDER BY time DESC LIMIT 10 
	在Web应用中，“列出最新的回复”之类的查询非常普遍，这通常会带来可扩展性问题。这令人沮丧，因为项目本来就是按这个顺序被创建的，但要输出这个顺序却不得不进行排序操作。
	类似的问题就可以用Redis来解决。比如说，我们的一个Web应用想要列出用户贴出的最新20条评论。在最新的评论边上我们有一个“显示全部”的链接，点击后就可以获得更多的评论。
	我们假设数据库中的每条评论都有一个唯一的递增的ID字段。
	我们可以使用分页来制作主页和评论页，使用Redis的模板，每次新评论发表时，我们会将它的ID添加到一个Redis列表：
	LPUSH latest.comments <ID> 
	我们将列表裁剪为指定长度，因此Redis只需要保存最新的5000条评论：
	LTRIM latest.comments 0 5000 
	每次我们需要获取最新评论的项目范围时，我们调用一个函数来完成（使用伪代码）：
	FUNCTION get_latest_comments(start, num_items):
	    id_list = redis.lrange("latest.comments",start,start+num_items - 1)
	    IF id_list.length < num_items
	        id_list = SQL_DB("SELECT ... ORDER BY time LIMIT ...")
	    END
	    RETURN id_list
	END

      这里我们做的很简单。在Redis中我们的最新ID使用了常驻缓存，这是一直更新的。但是我们做了限制不能超过5000个ID，因此我们的获取ID函数会一直询问Redis。只有在start/count参数超出了这个范围的时候，才需要去访问数据库。

        我们的系统不会像传统方式那样“刷新”缓存，Redis实例中的信息永远是一致的。SQL数据库（或是硬盘上的其他类型数据库）只是在用户需要获取“很远”的数据时才会被触发，而主页或第一个评论页是不会麻烦到硬盘上的数据库了。




二、Redis的数据结构与相关命令操作
Redis支持五种数据类型：
	string（字符串）
	hash（哈希）
	list（列表）
	set（集合）
	zset(sorted set：有序集合)。

2.0 前提
键值对。Key Value，其中的Key就是一个字符串，相当于名字。

2.1 string（字符串）
string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpeg图片或者序列化的对象。
string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。

当想要存储时，string类型值时，实际上是将string与string进行映射存储。
（以下是在redis客户端 redis-cli下运行的结果）
{
> set mykey somevalue
OK
> get mykey
"somevalue"

set和get命令，是用来创建键值对和获取值的命令。
}


常用命令（了解其他命令，访问Redis文档或者访问菜鸟教程）：
== Set命令
用于设置给定 key 的值。如果 key 已经存储其他值， SET 就覆写旧值，且无视类型。

基本语法：SET  KEY_NAME  VALUE
返回值：在 Redis 2.6.12 以前版本， SET 命令总是返回 OK ；从 Redis 2.6.12 版本开始， SET 在设置操作成功完成时，才返回 OK 。

== Get 命令
用于获取指定 key 的值。如果 key 不存在，返回 nil 。如果key 储存的值不是字符串类型，返回一个错误。

基本语法：GET  KEY_NAME
返回值：返回 key 的值，如果 key 不存在时，返回 nil。 如果 key 不是字符串类型，那么返回一个错误。

== Getrange 命令
用于获取存储在指定 key 中字符串的子字符串。字符串的截取范围由 start 和 end 两个偏移量决定(包括 start 和 end 在内)。

基本语法：GETRANGE  KEY_NAME  start end
返回值：截取得到的子字符串。

== Strlen 命令
用于获取指定 key 所储存的字符串值的长度。当 key 储存的不是字符串值时，返回一个错误。

基本语法：STRLEN  KEY_NAME
返回值：字符串值的长度。 当 key 不存在时，返回 0。

== Incr 命令
将 key 中储存的数字值增一。
如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。
如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
本操作的值限制在 64 位(bit)有符号数字表示之内。

基本语法：INCR  KEY_NAME 
返回值：执行 INCR 命令之后 key 的值。

== Incrby 命令
Redis Incrby 命令将 key 中储存的数字加上指定的增量值。
如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCRBY 命令。
如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
本操作的值限制在 64 位(bit)有符号数字表示之内。

基本语法：INCRBY  KEY_NAME  INCR_AMOUNT
返回值：加上指定的增量值之后， key 的值。

== Decr 命令
Redis Decr 命令将 key 中储存的数字值减一。
如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECR 操作。
如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
本操作的值限制在 64 位(bit)有符号数字表示之内。

基本语法：DECR  KEY_NAME 
返回值：执行命令之后 key 的值。

== Decrby 命令
Redis Decrby 命令将 key 所储存的值减去指定的减量值。
如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECRBY 操作。
如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
本操作的值限制在 64 位(bit)有符号数字表示之内。

基本语法：DECRBY  KEY_NAME  DECREMENT_AMOUNT
返回值：减去指定减量值之后， key 的值。


2.2 hash（哈希）
Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。
Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。

常用命令（了解其他命令，访问Redis文档或者访问菜鸟教程）：
== Hset 命令
Redis Hset 命令用于为哈希表中的字段赋值 。
如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。
如果字段已经存在于哈希表中，旧值将被覆盖。

基本语法：HSET  KEY_NAME FIELD  VALUE 
返回值：如果字段是哈希表中的一个新建字段，并且值设置成功，返回 1 。 如果哈希表中域字段已经存在且旧值已被新值覆盖，返回 0 。
{
> HSET myhash field1 "foo"
(integer) 1
}

== Hget 命令
Redis Hget 命令用于返回哈希表中指定字段的值。

基本语法：HGET  KEY_NAME  FIELD_NAME 
返回值：返回给定字段的值。如果给定的字段或 key 不存在时，返回 nil 。
{
> HSET site redis redis.com
(integer) 1

> HGET site redis
"redis.com"
}

== Hlen 命令
Redis Hlen 命令用于获取哈希表中字段的数量。

基本语法：HLEN  KEY_NAME 
返回值：哈希表中字段的数量。 当 key 不存在时，返回 0 。

== Hexists 命令
Redis Hexists 命令用于查看哈希表的指定字段是否存在。

基本语法：HEXISTS  KEY_NAME  FIELD_NAME 
返回值：如果哈希表含有给定字段，返回 1 。 如果哈希表不含有给定字段，或 key 不存在，返回 0 。

== Hkeys 命令
Redis Hkeys 命令用于获取哈希表中的所有域（field）。

基本语法：HKEYS  key 
返回值：包含哈希表中所有域（field）列表。 当 key 不存在时，返回一个空列表。

== Hincrby 命令
Redis Hincrby 命令用于为哈希表中的字段值加上指定增量值。
增量也可以为负数，相当于对指定字段进行减法操作。
如果哈希表的 key 不存在，一个新的哈希表被创建并执行 HINCRBY 命令。
如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 。
对一个储存字符串值的字段执行 HINCRBY 命令将造成一个错误。
本操作的值被限制在 64 位(bit)有符号数字表示之内。

基本语法：HINCRBY  KEY_NAME  FIELD_NAME  INCR_BY_NUMBER 
返回值：执行 HINCRBY 命令之后，哈希表中字段的值。
{
> HSET myhash field 5
(integer) 1
> HINCRBY myhash field 1
(integer) 6
>HINCRBY myhash field -1
(integer) 5
> HINCRBY myhash field -10
(integer) -5
}


2.3 list（列表）
Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）
一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。
{
> LPUSH runoobkey redis
(integer) 1
> LPUSH runoobkey mongodb
(integer) 2
> LPUSH runoobkey mysql
(integer) 3
> LRANGE runoobkey 0 10

1) "mysql"
2) "mongodb"
3) "redis"
}

2.4 set（集合）
Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。
Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。
集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。
{
> SADD runoobkey redis
(integer) 1
> SADD runoobkey mongodb
(integer) 1
> SADD runoobkey mysql
(integer) 1
> SADD runoobkey mysql
(integer) 0
> SMEMBERS runoobkey

1) "mysql"
2) "mongodb"
3) "redis"
}


2.5 zset(sorted set：有序集合)。
Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。
不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。
有序集合的成员是唯一的,但分数(score)却可以重复。
集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。
{
> ZADD runoobkey 1 redis
(integer) 1
> ZADD runoobkey 2 mongodb
(integer) 1
> ZADD runoobkey 3 mysql
(integer) 1
> ZADD runoobkey 3 mysql
(integer) 0
> ZADD runoobkey 4 mysql
(integer) 0
> ZRANGE runoobkey 0 10 WITHSCORES

1) "redis"
2) "1"
3) "mongodb"
4) "2"
5) "mysql"
6) "4"
}



三、Redis的命令
可以对key键值进行操作的命令等等。
（查阅菜鸟教程或官网文档）



四、Redis的配置属性




五、Redis的安装与使用




六、Redis与数据库的交互设计方案
方案由从易到难的顺序，但无论哪种方法，都需要保证的是Reids和MySQL的数据一致性。

方案一：

程序同时写Redis和MySQL
读Redis

方案二：
程序写Redis，并将写放入MQ（消息队列）写MySQL
读Redis


七、参考：
CSDN博客：Redis应用场景 https://blog.csdn.net/hguisu/article/details/8836819
	超强、超详细Redis入门教程 https://blog.csdn.net/liqingtx/article/details/60330555
博客园：redis支持哪些数据类型？redis命令大全 https://www.cnblogs.com/jxxblogs/p/12238552.html
菜鸟教程：Redis教程
Redis官网： https://redis.io

